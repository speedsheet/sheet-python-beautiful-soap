# <#>Beautiful Soup<> SpeedSheet
<b>Find it faster.<>

This is an interactive <b>Beatuiful Soup<> cheat sheet. Beautiful Soup is a Python library for parsing web pages and HTML. Use the search to instantly get answers.


<table><col><b>Basic<>

<*><link "?q=hello+world">Hello World<>
<link "?q=install-only">Installing<><>

<*><link "?q=parse-only">Parsing<><>

<*><link "?q=online-docs">Online Docs<><>


<b>Related SpeedSheets<>

<*><l "python">Python<>
<l "aiohttp">aiohttp<>
<l "requests">requests<><><><col>	<><col><b>Page Properties<>

<*><link "?q=page-only">Page<>
<link "?q=page-properties-only">Page Properties<>
<link "?q=page-functions-only">Page Functions<><>

<*><link "?q=element-only">Element<>
<link "?q=element-properties-only">Element Properties<>
<link "?q=element-functions-only">Element Functions<><><><>


# Online Documents
@
@ links, online, online-docs-only

### Beautiful Soup Documents
<l>https://www.crummy.com/software/BeautifulSoup/<>

<l>https://beautiful-soup-4.readthedocs.io/en/latest/<>

### Beautiful Soup Library on PyPi
<l>https://pypi.org/project/beautifulsoup4/<>



# Library


## Install Library - pip

<cb>pip install beautifulsoup4<>
@
@ command, commandline, install-only



## Install Library - pip requirements.txt

requirements.txt:

<cb>beautifulsoup4<>

Command:

<cb>pip install -r requiremets.txt<>
@
@ command, commandline, install-only



## Program - Import

<cb>from bs4 import BeautifulSoup<>



# Hello World


### Read Google

Gets the page title for Google's landing page.
Use Python's internal urllib library to retrieve the page.

<cb>from urllib.request import urlopen
from bs4 import BeautifulSoup

<v>url<> = '<v>https://google.com<>'

with urlopen(<v>url<>) as <v>response<>:
	<v>content<> = <v>response<>.read()

<v>soup<> = BeautifulSoup(<v>content<>, 'html.parser')

print(<v>soup<>.title)<>



### Read Google / Using Requests

Get the page title for Google's landing page using the <l>requests<> http library:

<cb>from bs4 import BeautifulSoup
import requests

<v>url<> = '<v>https://google.com<>'

<v>content<> = requests.get(<v>url<>).text
<v>soup<> = BeautifulSoup(<v>content<>, 'html.parser')

print(<v>soup<>.title)<>



# Parse
@
@ parsing, parse-only, parsing-only


### Parse HTML - Using Python's Stock Parser

<cb>= BeautifulSoup(<v>content<>, 'html.parser')<>

Usage:

<cb>from bs4 import BeautifulSoup

<v>soup<> = BeautifulSoup(<v>content<>, 'html.parser')<>
@
@ html.parser
@ bs.BeautifulSoup(), BeautifulSoup()



### Parse HTML - Using lxml

<cb>= BeautifulSoup(<v>content<>, 'lxml')<>

Usage:

<cb>from bs4 import BeautifulSoup

<v>soup<> = BeautifulSoup(<v>content<>, 'lxml')<>

Requires lxml:

pip / requirements.txt

<cb>lxml<>
@
@ bs.BeautifulSoup(), BeautifulSoup()



### Parse XML - Using lxml

<cb>= BeautifulSoup(<v>content<>, 'xml')<>

Usage:

<cb>from bs4 import BeautifulSoup

<v>soup<> = BeautifulSoup(<v>content<>, 'xml')<>

Requires lxml:

pip / requirements.txt

<cb>lxml<>
@
@ xml
@ bs.BeautifulSoup(), BeautifulSoup()



# Page
@
@ page-only


## Page - Properties
@
@ page-properties-only


### Page - Body

<cb>= <v>soup<>.body<>


Returns the body element of the page.
@
@ .body



### Page - Head

<cb>= <v>soup<>.head<>


Returns the head element of the page.
@
@ .head



### Page - HTML

<cb>= str(<v>soup<>)<>


Returns the page HTML.


### Page - Links

<cb>= [ <v>element<>['href']
        for <v>element<> in <v>soup<>.find_all('a') if 'href' in <v>element<>.attrs]<>


Returns all page links.


### Page - Title

<cb>= <v>soup<>.title.string<>


### Page - Text - Entire Text

<cb>= <v>soup<>.get_text()<>


## Page - Functions
@
@ page-functions-only


### Page - Find By Element Type

<cb>= <v>soup<>.find('<v>element_type<>')<>
@
@ .find(), tag


### Page - Find By Class Name

<cb>= <v>soup<>.find(class_ = '<v>class_name<>')<>
@
@ .find()


### Page - Find By ID

<cb>= <v>soup<>.find(id = '<v>id<>')<>
@
@ .find()


### Page - Find All

<cb>= <v>soup<>.find_all()<>


Returns all sub-elements.
@
@ .find_all()


### Page - Find All By Element Type

<cb>= <v>soup<>.find_all('<v>element_type<>')<>
@
@ .find_all()


### Page - Find All By Class Name

<cb>= <v>soup<>.find_all(class_ = '<v>class_name<>')<>
@
@ .find_all(), tag



# Element
@
@ element-only


## Element - Properties
@
@ element-properties-only, properties-only


### Element - Get Name

<cb>= <v>element<>.name<>


Returns the name (element type) of the element.

For a div element, returns 'div'.
@
@ .name, type, tag



### Element - Get Text

<cb>= <v>element<>.string<>


Returns the inner text of the element.
@
@ .string, .get_text()



### Element - Get HTML

<cb>= str(<v>element<>)<>



### Element - Get Attribute

<cb>= <v>element<>['<v>attribute<>']<>

or

<cb>= <v>element<>.get('<v>attribute<>')<>
@
@ [], .get()



### Element - Get Attributes

<cb>= <v>element<>.attrs<>

Returns: <c>dict<>


Returns a dict of all attribute names.
@
@ .attrs, attrs



### Element - Get Class

<cb>= <v>element<>['class']<>

Returns: <c>list[str]<>


Returns an array of all classes for the element.

If only one class, still returns an array.
If no class, the class attribute is not present.


Get Classes If Any:

<cb>def get_classe(<v>element<>):
	<#>''' Return classes or empty list if none.'''<>

	if 'class' not in <v>element<>.attrs:
    	return []

	return <v>element<>['class']

<v>classes<> = get_classes(<v>element_1<>)<>
@
@ [], .get()



### Element - Get ID

<cb>= <v>element<>['id']<>

Returns: <c>str<>


Returns the element id.

Only Tags (type <c>bs4.element.Tag<>) have ids.
Tags with no ids will return <c>None<>.
Non tags will have no id attribute.
@
@ [], .get()



### Element - Has Attribute?

<cb>if '<v>attribute<>' in <v>element<>.attrs:<>
@
@ contains?, has, exists, if in
@ .attrs



### Element - Has Class?

<cb>= type(<v>item<>) == Tag and 'class' <v>element<>.attr<>

Usage:

<cb>from bs4.element import Tag

= type(<v>item<>) == Tag and 'class' <v>element<>.attr<><>


Returns true when the item has a classes attribute.



### Element - Has Id?

<cb>= type(<v>item<>) == Tag and <v>element<>.id is not None<>

Usage:

<cb>from bs4.element import Tag

= type(<v>item<>) == Tag and 'class' <v>element<>.id is not None<>


Returns true when the item has an id attribute.



### Element - Type

<cb>bs4.element.Tag<>

<cb>from bs4.element import Tag

= type(<v>element<>) == Tag<>


Elements are returned as instances of the <c>Tag<> class.
@
@ variable



## Element - Properties - Relative Elements
@
@ element-properties-only, properties-only


### Element - Get Children

<cb>= <v>element<>.children<>

Returns: <c>iterator<>


Returns all element's direct children.

Includes elements (tags) and non element children.
@
@ .children



### Element - Get Child Elements Only

<cb>= [child for child in <v>element<>.children if type(child) == Tag]<>

Usage:

<cb>from bs4.element import Tag

= [child for child in <v>element<>.children if type(child) == Tag]<>

Returns: <c>list[Tag]<>


Returns all direct child elements only.

Non elements are filtered out.
@
@ tags



### Element - Get Parent

<cb>= <v>element<>.parent<>


Returns the parent element of the element.
@
@ .parent



### Element - Get Sibling - Previous

<cb>= <v>element<>.previous_sibling<>


Returns the next sibling element.
@
@ .previous_sibling



### Element - Get Sibling - Next

<cb>= <v>element<>.next_sibling<>


Returns the next sibling element.
@
@ .next_sibling



## Element - Functions
@
@ element-function-only, element-functions-only


### Element - Find By Element Type

<cb>= <v>element<>.find('<v>element_type<>')<>
@
@ .find(), tag



### Element - Find By Class Name

<cb>= <v>element<>.find(class_ = '<v>class_name<>')<>
@
@ .find()



### Element - Find By ID

<cb>= <v>element<>.find(id = '<v>id<>')<>
@
@ .find()



### Element - Find All

<cb>= <v>element<>.find_all()<>


Returns all sub-elements.
@
@ .find_all()



### Element - Find All By Element Type

<cb>= <v>element<>.find_all(<v>element_type<>)<>
@
@ .find_all(), tag



### Element - Find All By Class Name

<cb>= <v>element<>.find_all(class_ = <v>class_name<>)<>
@
@ .find_all()



# How To
@
@ how-to



### Is Element / Tag

<cb>= type(<v>item<>) == Tag<>

Usage:

<cb>from bs4.element import Tag

= type(<v>item<>) == Tag<>
@
@ bs4.element.Tag, type()



### Format HTML

<cb>= soup.prettify()<>

<cb>= <v>element_1<>.prettify()<>


Returns formatted HTML with each element on it's own line.


Example:

<cb>from bs4 import BeautifulSoup

<v>html<> = '''\<html>\<body>\<table>\<tr>\<td>Item 1\</td>\</tr>\</table>\</body>\</html>'''

<v>soup<> = BeautifulSoup(html, 'html.parser')
<v>formatted<> = soup.prettify()

print(<v>formatted<>)

<#># Prints:
\#
\#   \<html>
\#    \<body>
\#     \<table>
\#      \<tr>
\#       \<td>
\#        \Item 1
\#       \</td>
\#      \</tr>
\#     \</table>
\#    \</body>
\#   \</html><><>

@
@ soup.prettify(), .prettify(), pretty, formatted, print, show



### Table - Parse

<cb><v>data<> = []

<v>table<> = <v>soup<>.find('table', <v>...<>)

for <v>row<> in <v>table<>.find_all('tr'):
	<v>values<> = [<v>column<>.text.strip() for <v>column<> in <v>row<>.find_all('td')]
	<v>data<>.append(<v>values<>)<>

With 'tbody':

<cb><v>data<> = []

<v>table<> = <v>soup<>.find('table', <v>...<>)
<v>body<> = <v>table<>.find('tbody')

for <v>row<> in <v>body<>.find_all('tr'):
	<v>values<> = [<v>column<>.text.strip() for <v>column<> in <v>row<>.find_all('td')]
	<v>data<>.append(<v>values<>)<>


Extracts the column values in the table into a list of lists.


Example:

<cb>from bs4 import BeautifulSoup

<v>html<> = '''\<html>\<body>
    \<table id="<v>table-1<>">
        \<tr>\<td>1\</td>\<td>Item 1\</td>\</tr>
        \<tr>\<td>2\</td>\<td>Item 2\</td>\</tr>
        \<tr>\<td>3\</td>\<td>Item 3\</td>\</tr>
    \</table>
\</body>\</html>'''

<v>soup<> = BeautifulSoup(html, 'html.parser')

<v>data<> = []
<v>table<> = <v>soup<>.find('table', id='<v>table-1<>')
for <v>row<> in <v>table<>.find_all('tr'):
	<v>values<> = [<v>column<>.text.strip() for <v>column<> in <v>row<>.find_all('td')]
	<v>data<>.append(<v>values<>)

print(<v>data<>)

<#># Prints: [['1', 'Item 1'], ['2', 'Item 2'], ['3', 'Item 3']]<><>
@
@ tables, columns, rows, values



# Terms


### lxml
A fast library for parsing XML and HTML.

Wraps the C librarie libxml2 and libxslt.

Home Page:
<l>https://lxml.de/<>

PyPi:
<l>https://pypi.org/project/lxml/<>



### XPath

Not supported by BeautifulSoap